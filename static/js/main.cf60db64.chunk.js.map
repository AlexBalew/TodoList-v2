{"version":3,"sources":["api/Todolists.api.ts","components/addItemForm/AddItemForm.tsx","utils/error-utils.ts","Reducers/authReducer.ts","Reducers/app-reducer.ts","Reducers/todolist.reducer.ts","Reducers/tasks.reducer.ts","components/editableSpan/EditableSpan.tsx","components/task/Task.tsx","components/todoList/todolist/todolist.tsx","components/todoList/TodoLists.tsx","components/errorSnackBar/ErrorSnackBar.tsx","components/login/login.tsx","components/app/App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","callback","disabled","label","console","log","useState","title","setTitle","error","setError","style","height","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","trim","helperText","background","borderRadius","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","tasksAPI","taskId","model","description","deadline","status","priority","startDate","authAPI","authParams","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","isLoggedInAC","type","isAppInitialized","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","todolist","entityStatus","onDoubleClick","Task","onChangeCheckedHandler","useCallback","changeTaskStatus","task","id","checked","Completed","New","onChangeTitleHandler","newTitle","onChangeTaskTitle","className","Checkbox","deleteTask","Delete","TodoList","useDispatch","useEffect","todolistID","demo","then","res","tasks","setTasksAC","items","catch","allFilter","changeFilter","activeFilter","completedFilter","ChangeTDListTitle","changeTDListTitleAPP","addTaskBridge","addTask","tasksForTDList","filter","t","removeTDFunc","listStyle","paddingLeft","map","Button","TodoLists","todolistsFromState","useSelector","state","todoLists","tasksFromState","login","todolists","newTaskTitle","resultCode","action","item","addTaskTC","getState","find","taskID","changeTaskStatusAC","changeTaskStatusTC","deleteTaskAC","deleteTaskTC","onChangeTaskTitleAC","changeTaskTitleTC","changeTDlFilterAC","removeTodolistsTC","addTDList","todoList","addTodolistTC","changeTDlTitleAC","changeTodolistTitleTC","Grid","container","padding","spacing","tl","filteredTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackBar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justifyContent","m","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","isInitialized","logOutHandler","flexGrow","minHeight","paddingBottom","AppBar","position","Toolbar","edge","marginRight","Menu","Typography","align","LinearProgress","Container","fixed","path","render","exact","display","marginTop","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mainReducer","combineReducers","todoListId","copyState","forEach","a","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf60db64.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'ae005362-3cd1-4901-a9c5-790f2698eec1'},\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\n/*type CreateTDListResType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype UpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}\r\n\r\ntype DeleteTodolistResponseType = { ///all types in generic one\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}*/\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    //fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    items: Array<ResponseTaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTDLists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\",)\r\n    },\r\n    createTDLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTDLists(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTDLists(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: ResponseTaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelType) {\r\n        return instance.put<ResponseType<{ data: ResponseTaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            {\r\n                title: model.title,\r\n                description: model.description,\r\n                deadline: model.deadline,\r\n                status: model.status,\r\n                priority: model.priority,\r\n                startDate: model.startDate\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(authParams: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, authParams)\r\n    },\r\n    authMe() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('/auth/login')\r\n    }\r\n}","import TextField from \"@mui/material/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport { AddBox } from \"@mui/icons-material\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n    label?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callback, disabled = false, label = 'new task title'}: AddItemFormPropsType) => {\r\n\r\n    console.log('AddItemForm rendered')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const onChangeNewTaskTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() === '') {\r\n            setError('Insert Title')\r\n        }\r\n    }\r\n\r\n    const addTaskButton = () => {\r\n        if (title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Insert new title')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            <TextField\r\n                disabled={disabled}\r\n                size={'small'}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeNewTaskTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={label ? label : 'Title'}\r\n                helperText={error}\r\n                style={{background: '#FFFFFF', borderRadius: 5}}/>\r\n            <IconButton color={'secondary'} size={'small'} onClick={addTaskButton} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {setAppErrorAC, setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"../Reducers/app-reducer\";\r\nimport {ResponseType} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T = {}>(data: ResponseType<T>, dispatch: Dispatch<setAPPErrorACType | setAppStatusACType>) => {\r\n\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error has occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n\r\n}\r\n\r\nexport const handleServerNetworkError = <T = {}>(error: {message: string}, dispatch: Dispatch<setAPPErrorACType | setAppStatusACType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../api/Todolists.api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type InitialStateType = {\r\n    isLoggedIn : boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET_USER\\'S_IS_LOGGED_IN_STATUS' :\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type ActionsType = isLoggedInACType\r\n\r\nexport type isLoggedInACType = ReturnType<typeof isLoggedInAC>\r\n\r\nexport const isLoggedInAC = (isLoggedIn: boolean) => {\r\n    return {\r\n        type: 'login/SET_USER\\'S_IS_LOGGED_IN_STATUS',\r\n        isLoggedIn\r\n    } as const\r\n}\r\n\r\nexport const authTC = (authParams: LoginParamsType) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(authParams)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(isLoggedInAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(isLoggedInAC(false))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionsType | setAppStatusACType | setAPPErrorACType>\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/Todolists.api\";\r\nimport {isLoggedInAC} from \"./authReducer\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isAppInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isAppInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET_ERROR':\r\n            let a = {...state, error: action.error}\r\n            return a\r\n        case 'APP/SET_IS_INITIALIZED_STATUS':\r\n            return {...state, isAppInitialized: action.isAppInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type ActionsType = setAppStatusACType | setAPPErrorACType | setAppIsInitializedStatusACType\r\n\r\nexport type setAPPErrorACType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET_ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET_STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport type setAppIsInitializedStatusACType = ReturnType<typeof setAppIsInitializedStatusAC>\r\n\r\nexport const setAppIsInitializedStatusAC = (isAppInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET_IS_INITIALIZED_STATUS',\r\n        isAppInitialized\r\n    } as const\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(isLoggedInAC(true))\r\n            } else {\r\n                dispatch(isLoggedInAC(false))\r\n            }\r\n            dispatch(setAppIsInitializedStatusAC(true))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {todolistsAPI, TodolistType} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionSType | setAppStatusACType | setAPPErrorACType>\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionSType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'todolists/REMOVE_TODOLIST' : {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'todolists/ADD_TODOLIST' : {\r\n            return [...state, {...action.todoList, filter: 'all', entityStatus: 'idle'}]\r\n        }\r\n        case 'todolists/CHANGE_TDL_TITLE' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'todolists/CHANGE_TDL_FILTER' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'todolists/CHANGE_TDL_ENTITY_STATUS' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        case 'todolists/SET_TODOLISTS' : {\r\n            return action.todolists.map(tl => {\r\n                    return {...tl, filter: \"all\", entityStatus: 'idle'}\r\n                }\r\n            )\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionSType =\r\n    RemoveTDlType\r\n    | addTDlType\r\n    | changeTDlTitleType\r\n    | changeTDlFilterType\r\n    | setTodolistsACType\r\n    | changeTDlEntityStatusACType\r\n\r\nexport type RemoveTDlType = ReturnType<typeof removeTDlAC>\r\n\r\nexport const removeTDlAC = (todolistID: string) => {\r\n    return {\r\n        type: 'todolists/REMOVE_TODOLIST',\r\n        id: todolistID\r\n    } as const\r\n}\r\n\r\nexport type addTDlType = ReturnType<typeof addTDlAC>\r\n\r\nexport const addTDlAC = (todoList: TodolistType) => {\r\n    return {\r\n        type: 'todolists/ADD_TODOLIST',\r\n        todoList\r\n    } as const\r\n}\r\n\r\ntype changeTDlTitleType = ReturnType<typeof changeTDlTitleAC>\r\n\r\nexport const changeTDlTitleAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: 'todolists/CHANGE_TDL_TITLE',\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\n\r\ntype changeTDlFilterType = ReturnType<typeof changeTDlFilterAC>\r\n\r\nexport const changeTDlFilterAC = (filter: FilterType, todolistId: string) => {\r\n    return {\r\n        type: 'todolists/CHANGE_TDL_FILTER',\r\n        filter,\r\n        id: todolistId,\r\n    } as const\r\n}\r\n\r\ntype changeTDlEntityStatusACType = ReturnType<typeof changeTDlEntityStatusAC>\r\n\r\nexport const changeTDlEntityStatusAC = (status: RequestStatusType, tlID: string) => {\r\n    return {\r\n        type: 'todolists/CHANGE_TDL_ENTITY_STATUS',\r\n        status,\r\n        id: tlID,\r\n    } as const\r\n}\r\n\r\nexport type setTodolistsACType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {\r\n        type: 'todolists/SET_TODOLISTS',\r\n        todolists,\r\n    } as const\r\n}\r\n\r\nexport const getTodolistsTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTDLists()\r\n        .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTDlEntityStatusAC('loading', todolistId))\r\n    todolistsAPI.deleteTDLists(todolistId)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTDlAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTDLists(title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTDlAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTDLists(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTDlTitleAC(todolistId, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {addTDlType, RemoveTDlType, setTodolistsACType} from \"./todolist.reducer\";\r\nimport {ResponseTaskType, tasksAPI, TaskStatuses} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {MainReducerType} from \"../store/store\";\r\nimport {setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionSType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'task/DELETE_TASK' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)\r\n            }\r\n        }\r\n        case 'task/ADD_TASK' : {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]],\r\n            }\r\n        }\r\n        case 'task/CHANGE_TASK_TITLE' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.id\r\n                    ? {...t, title: action.title} : t)\r\n            }\r\n        }\r\n        case 'task/CHANGE_TASK_STATUS' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.id\r\n                    ? {...t, status: action.status} : t)\r\n            }\r\n        }\r\n        case 'todolists/ADD_TODOLIST' : {\r\n            return {...state, [action.todoList.id]: []}\r\n        }\r\n        case 'todolists/REMOVE_TODOLIST' : {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'todolists/SET_TODOLISTS' : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'task/SET_TASKS_TO_REDUX' : {\r\n            const copyState = {...state}\r\n            copyState[action.todolistID] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionSType =\r\n    RemoveTDlType\r\n    | addTDlType\r\n    | deleteTaskType\r\n    | addTaskACType\r\n    | onChangeTitleType\r\n    | changeTaskStatusACType\r\n    | setTodolistsACType\r\n    | setTasksACType\r\n\r\ntype DispatchType = Dispatch<ActionSType | setAppStatusACType | setAPPErrorACType>\r\n\r\ntype deleteTaskType = ReturnType<typeof deleteTaskAC>\r\n\r\nexport const deleteTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'task/DELETE_TASK',\r\n        todolistId,\r\n        id: taskId\r\n    } as const\r\n}\r\n\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (task: ResponseTaskType) => {\r\n    return {\r\n        type: 'task/ADD_TASK',\r\n        task\r\n    } as const\r\n}\r\n\r\n\r\ntype onChangeTitleType = ReturnType<typeof onChangeTaskTitleAC>\r\n\r\nexport const onChangeTaskTitleAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {\r\n        type: 'task/CHANGE_TASK_TITLE',\r\n        todolistId,\r\n        id: taskId,\r\n        title\r\n    } as const\r\n}\r\n\r\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\n\r\nexport const changeTaskStatusAC = (todolistID: string, taskID: string, status: TaskStatuses) => {\r\n    return {\r\n        type: 'task/CHANGE_TASK_STATUS',\r\n        todolistID,\r\n        id: taskID,\r\n        status\r\n    } as const\r\n}\r\n\r\ntype setTasksACType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (todolistID: string, tasks: Array<ResponseTaskType>) => {\r\n    return {\r\n        type: 'task/SET_TASKS_TO_REDUX',\r\n        todolistID,\r\n        tasks\r\n    } as const\r\n}\r\n\r\nexport const getTasksTC = (todolistID: string) => (dispatch: DispatchType) => { //сделать\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistID)\r\n        .then(res => {\r\n            if(res.data.error == null) {\r\n                dispatch(setTasksAC(todolistID, res.data.items))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n              // handleServerAppError(res, dispatch)\r\n            }\r\n        }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(deleteTaskAC(todolistId, taskId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    const action = addTaskAC(task)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: DispatchType, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*/\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(changeTaskStatusAC(todolistId, taskId, status))\r\n                            dispatch(setAppStatusAC('succeeded'))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: DispatchType, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(onChangeTaskTitleAC(todolistId, taskId, title))\r\n                            dispatch(setAppStatusAC('succeeded'))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist.reducer\";\r\n\r\nexport type editableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: editableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan rendered')\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const setViewNode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n        return props.title\r\n    }\r\n\r\n    return (editMode\r\n            ? <input onChange={onChangeTitleHandler} value={title} autoFocus onBlur={setViewNode}\r\n                     onKeyPress={onKeyPressHandler} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist.reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    task: ResponseTaskType\r\n    todolistId: string\r\n    todolist: TodolistDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onChangeCheckedHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistId, props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        props.onChangeTaskTitle(props.todolistId, props.task.id, newTitle)\r\n    }, [props.todolistId, props.task.id, props.onChangeTaskTitle])\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'completedTask' : ''}>\r\n        <Checkbox onChange={onChangeCheckedHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler} todolist={props.todolist}/>\r\n        <IconButton aria-label=\"delete\" onClick={() => props.deleteTask(props.todolistId, props.task.id)} disabled={props.todolist.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n})","import {Button, IconButton} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../addItemForm/AddItemForm\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {getTasksTC} from \"../../../Reducers/tasks.reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/Todolists.api\";\r\nimport {EditableSpan} from \"../../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"../../task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../../../Reducers/todolist.reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses, ) => void\r\n    onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    removeTDFunc: (todolistId: string) => void\r\n    changeTDListTitleAPP: (todolistId: string, newTitle: string) => void\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodolistPropsType) => {\r\n\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n\r\n    const allFilter = useCallback(() => {\r\n        props.changeFilter('all', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const activeFilter = useCallback(() => {\r\n        props.changeFilter('active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const completedFilter = useCallback(() => {\r\n        props.changeFilter('completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n\r\n    const removeTDButton = () => {\r\n        props.removeTDFunc(props.todolist.id)\r\n    }\r\n\r\n    const ChangeTDListTitle = useCallback((newTitle: string) => {\r\n        props.changeTDListTitleAPP(props.todolist.id, newTitle)\r\n    }, [props.changeTDListTitleAPP, props.todolist.id])\r\n\r\n    const addTaskBridge = useCallback((title: string) => {\r\n        props.addTask(props.todolist.id, title)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n\r\n    let tasksForTDList = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={ChangeTDListTitle} todolist={props.todolist}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTDButton}\r\n                            disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addTaskBridge} disabled={props.todolist.entityStatus === 'loading'}/>\r\n\r\n            <div>\r\n                <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                    {\r\n                        tasksForTDList.map(t => <Task key={t.id}\r\n                                                      task={t}\r\n                                                      deleteTask={props.deleteTask}\r\n                                                      changeTaskStatus={props.changeTaskStatus}\r\n                                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                                      todolistId={props.todolist.id}\r\n                                                      todolist={props.todolist}\r\n                        />)\r\n                    }\r\n                </ul>\r\n                <Button color={props.todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={allFilter}\r\n                        size={\"small\"}>All</Button>\r\n                <Button color={props.todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={activeFilter}\r\n                        size={\"small\"}>Active</Button>\r\n                <Button color={props.todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={completedFilter}\r\n                        size={\"small\"}>Completed</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTDlFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterType,\r\n    getTodolistsTC,\r\n    removeTodolistsTC\r\n} from \"../../Reducers/todolist.reducer\";\r\nimport {TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskStatusTC,\r\n    changeTaskTitleTC,\r\n    deleteTaskTC,\r\n    TasksStateType\r\n} from \"../../Reducers/tasks.reducer\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {MainReducerType} from \"../../store/store\";\r\nimport {TodoListsType} from \"../app/App\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {TodoList} from \"./todolist/todolist\";\r\n\r\n\r\nexport type ToDoListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoLists = React.memo(({demo = false}: ToDoListPropsType) => {\r\n\r\n    console.log('Todolist rendered')\r\n    const dispatch = useDispatch();\r\n    const todolistsFromState = useSelector<MainReducerType, TodoListsType>(state => state.todoLists)\r\n    const tasksFromState = useSelector<MainReducerType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(getTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const addTask = useCallback((todolistId: string, newTaskTitle: string) => {\r\n        dispatch(addTaskTC(todolistId, newTaskTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(changeTaskStatusTC(todolistId, taskId, status))\r\n    }, [dispatch])\r\n\r\n    const deleteTask = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, taskId))\r\n    }, [dispatch])\r\n\r\n    const onChangeTaskTitle = useCallback((todolistId: string, taskId: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(todolistId, taskId, newTitle))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTDlFilterAC(filter, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTDFunc = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistsTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTDList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTDListTitleAPP = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newTitle))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm callback={addTDList} label={'new todolist title'}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistsFromState.map(tl => {\r\n                        let filteredTasks = tasksFromState[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={filteredTasks}\r\n                                    deleteTask={deleteTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    removeTDFunc={removeTDFunc}\r\n                                    onChangeTaskTitle={onChangeTaskTitle}\r\n                                    changeTDListTitleAPP={changeTDListTitleAPP}\r\n                                    demo={demo}\r\n                                    todolist={tl}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    }\r\n                )}\r\n            </Grid>\r\n        </>\r\n\r\n\r\n    )\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {MainReducerType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../Reducers/app-reducer\";\r\nimport {AlertProps, Snackbar} from \"@mui/material\";\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    //const [open, setOpen] = React.useState(true);\r\n\r\n    const error = useSelector<MainReducerType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        //setOpen(false);\r\n    };\r\n\r\n\r\n    const isOpen = error !== null\r\n\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\"\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authTC} from \"../../Reducers/authReducer\";\r\nimport {MainReducerType} from \"../../store/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'wrong email'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    email: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n           dispatch(authTC(values))\r\n        }\r\n    })\r\n\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n\r\n    return  <Grid container justifyContent='center'>\r\n        <Grid item m={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in, please, get registration <a href={'https://social-network.samuraijs.com/'}\r\n                                                                   target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use these test account credentials:\r\n                        </p>\r\n                        <p>\r\n                            Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label='email'\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            label='password'\r\n                            margin=\"normal\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')} color={'secondary'}/>}\r\n                            label={'Remember me'}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}","import React, {useCallback, useEffect} from 'react';\nimport '../../App.css';\nimport {TodoLists} from \"../todoList/TodoLists\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {MainReducerType} from \"../../store/store\";\nimport {TodolistDomainType} from \"../../Reducers/todolist.reducer\";\nimport {ErrorSnackBar} from \"../errorSnackBar/ErrorSnackBar\";\nimport {initializeAppTC, RequestStatusType} from \"../../Reducers/app-reducer\";\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {logOutTC} from '../../Reducers/authReducer';\nimport {BrowserRouter, HashRouter, Redirect, Route} from \"react-router-dom\";\nimport {Login} from \"../login/login\";\n\nexport type TodoListsType = Array<TodolistDomainType>\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App  ({demo = false}: PropsType) {\n\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<MainReducerType, boolean>(state => state.app.isAppInitialized)\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\n    const status = useSelector<MainReducerType, RequestStatusType>(state => state.app.status)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const logOutHandler = useCallback(() => {\n        dispatch(logOutTC())\n    }, [])\n\n\n    if (!isInitialized) {\n        return <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"30%\"}}><CircularProgress /></div>\n    }\n\n\n    return (\n        <HashRouter>\n        <div style={{flexGrow: 1, background: '#E0E0E0', minHeight: '100vh', paddingBottom: '20px'}}>\n            <AppBar position=\"static\" color=\"default\">\n                <Toolbar>\n                    <ErrorSnackBar/>\n                    <IconButton edge=\"start\" style={{marginRight: 2}} color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" style={{flexGrow: 1}} align='center'>\n                        ToDoList\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={() => {logOutHandler()}}>Log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress color={'secondary'}/>}\n            </AppBar>\n            <Container fixed>\n                {<Route path={'/TodoList-v2'} /> && <Redirect to={'login'}/>}\n                <Route path={'/login'} render={() => <Login/>} />\n                <Route exact path={'/'} render={() => <TodoLists />} />\n            </Container>\n        </div>\n        </HashRouter>\n    );\n}\n\nexport default App\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../Reducers/todolist.reducer\";\r\nimport {tasksReducer} from \"../Reducers/tasks.reducer\";\r\nimport {appReducer} from \"../Reducers/app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../Reducers/authReducer\";\r\n\r\nexport type MainReducerType = ReturnType<typeof mainReducer>\r\n\r\nlet mainReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n\r\nexport let store = createStore(mainReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n                <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}