{"version":3,"sources":["api/Todolists.api.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","components/task/Task.tsx","Reducers/app-reducer.ts","utils/error-utils.ts","Reducers/tasks.reducer.ts","components/todoList/TodoList.tsx","Reducers/todolist.reducer.ts","components/errorSnackBar/ErrorSnackBar.tsx","components/app/App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","callback","disabled","label","console","log","useState","title","setTitle","error","setError","style","height","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","trim","helperText","background","borderRadius","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","todolist","entityStatus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","tasksAPI","taskId","model","description","deadline","status","priority","startDate","Task","onChangeCheckedHandler","useCallback","changeTaskStatus","task","id","checked","Completed","New","onChangeTitleHandler","newTitle","onChangeTaskTitle","className","Checkbox","deleteTask","Delete","initialState","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","TodoList","useDispatch","useEffect","todolistID","demo","then","res","tasks","setTasksAC","items","catch","allFilter","changeFilter","activeFilter","completedFilter","ChangeTDListTitle","changeTDListTitleAPP","addTaskBridge","addTask","tasksForTDList","filter","t","removeTDFunc","listStyle","paddingLeft","map","Button","Alert","forwardRef","ref","elevation","ErrorSnackBar","useSelector","state","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","todolistsFromState","todoLists","tasksFromState","todolists","tlID","newTaskTitle","resultCode","action","item","tID","getState","find","taskID","changeTaskStatusAC","changeTaskStatusTC","deleteTaskAC","deleteTaskTC","onChangeTaskTitleAC","changeTDlFilterAC","addTDList","todoList","addTodolistTC","changeTDlTitleAC","flexGrow","minHeight","paddingBottom","AppBar","position","Toolbar","edge","marginRight","Menu","Typography","align","LinearProgress","Container","fixed","Grid","container","padding","spacing","tl","filteredTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mainReducer","combineReducers","todoListId","copyState","forEach","a","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be7385e9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'ae005362-3cd1-4901-a9c5-790f2698eec1'},\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\n/*type CreateTDListResType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype UpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}\r\n\r\ntype DeleteTodolistResponseType = { ///all types in generic one\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}*/\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    //fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    items: Array<ResponseTaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTDLists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\",)\r\n    },\r\n    createTDLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTDLists(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTDLists(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: ResponseTaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelType) {\r\n        return instance.put<ResponseType<{data: ResponseTaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            {\r\n                title: model.title,\r\n                description: model.description,\r\n                deadline: model.deadline,\r\n                status: model.status,\r\n                priority: model.priority,\r\n                startDate: model.startDate\r\n            })\r\n    }\r\n}","import TextField from \"@mui/material/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport { AddBox } from \"@mui/icons-material\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n    label?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callback, disabled = false, label = 'new task title'}: AddItemFormPropsType) => {\r\n\r\n    console.log('AddItemForm rendered')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const onChangeNewTaskTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() === '') {\r\n            setError('Insert Title')\r\n        }\r\n    }\r\n\r\n    const addTaskButton = () => {\r\n        if (title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Insert new title')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            <TextField\r\n                disabled={disabled}\r\n                size={'small'}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeNewTaskTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={label ? label : 'Title'}\r\n                helperText={error}\r\n                style={{background: '#FFFFFF', borderRadius: 5}}/>\r\n            <IconButton color={'secondary'} size={'small'} onClick={addTaskButton} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist.reducer\";\r\n\r\nexport type editableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: editableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan rendered')\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const setViewNode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n        return props.title\r\n    }\r\n\r\n    return (editMode\r\n            ? <input onChange={onChangeTitleHandler} value={title} autoFocus onBlur={setViewNode}\r\n                     onKeyPress={onKeyPressHandler} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist.reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (tlID: string, tID: string, status: TaskStatuses) => void\r\n    onChangeTaskTitle: (tlID: string, tID: string, newTitle: string) => void\r\n    deleteTask: (tlID: string, tID: string) => void\r\n    task: ResponseTaskType\r\n    todolistId: string\r\n    todolist: TodolistDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onChangeCheckedHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistId, props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        props.onChangeTaskTitle(props.todolistId, props.task.id, newTitle)\r\n    }, [props.todolistId, props.task.id, props.onChangeTaskTitle])\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'completedTask' : ''}>\r\n        <Checkbox onChange={onChangeCheckedHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler} todolist={props.todolist}/>\r\n        <IconButton aria-label=\"delete\" onClick={() => props.deleteTask(props.todolistId, props.task.id)} disabled={props.todolist.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n})","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET_ERROR':\r\n            let a = {...state, error: action.error}\r\n            return a\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type ActionsType = setAppStatusACType | setAPPErrorACType\r\n\r\nexport type setAPPErrorACType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET_ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET_STATUS',\r\n        status\r\n    } as const\r\n}","import {setAppErrorAC, setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"../Reducers/app-reducer\";\r\nimport {ResponseType} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T = {}>(data: ResponseType<T>, dispatch: Dispatch<setAPPErrorACType | setAppStatusACType>) => {\r\n\r\n    if (data.messages.length) {\r\n        debugger\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error has occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n\r\n}\r\n\r\nexport const handleServerNetworkError = <T = {}>(error: {message: string}, dispatch: Dispatch<setAPPErrorACType | setAppStatusACType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {addTDlType, RemoveTDlType, setTodolistsACType} from \"./todolist.reducer\";\r\nimport {ResponseTaskType, tasksAPI, TaskStatuses} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {MainReducerType} from \"../store/store\";\r\nimport {setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionSType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'DELETE_TASK' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)\r\n            }\r\n        }\r\n        case 'ADD_TASK' : {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]],\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_TITLE' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.id\r\n                    ? {...t, title: action.title} : t)\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_STATUS' : {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.id\r\n                    ? {...t, status: action.status} : t)\r\n            }\r\n        }\r\n        case 'ADD_TODOLIST' : {\r\n            return {...state, [action.todoList.id]: []}\r\n        }\r\n        case 'REMOVE_TODOLIST' : {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'SET_TODOLISTS' : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET_TASKS_TO_REDUX' : {\r\n            const copyState = {...state}\r\n            copyState[action.todolistID] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionSType =\r\n    RemoveTDlType\r\n    | addTDlType\r\n    | deleteTaskType\r\n    | addTaskACType\r\n    | onChangeTitleType\r\n    | changeTaskStatusACType\r\n    | setTodolistsACType\r\n    | setTasksACType\r\n\r\ntype DispatchType = Dispatch<ActionSType | setAppStatusACType | setAPPErrorACType>\r\n\r\ntype deleteTaskType = ReturnType<typeof deleteTaskAC>\r\n\r\nexport const deleteTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'DELETE_TASK',\r\n        todolistId,\r\n        id: taskId\r\n    } as const\r\n}\r\n\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (task: ResponseTaskType) => {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        task\r\n    } as const\r\n}\r\n\r\n\r\ntype onChangeTitleType = ReturnType<typeof onChangeTaskTitleAC>\r\n\r\nexport const onChangeTaskTitleAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE_TASK_TITLE',\r\n        todolistId,\r\n        id: taskId,\r\n        title\r\n    } as const\r\n}\r\n\r\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\n\r\nexport const changeTaskStatusAC = (todolistID: string, taskID: string, status: TaskStatuses) => {\r\n    return {\r\n        type: 'CHANGE_TASK_STATUS',\r\n        todolistID,\r\n        id: taskID,\r\n        status\r\n    } as const\r\n}\r\n\r\ntype setTasksACType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (todolistID: string, tasks: Array<ResponseTaskType>) => {\r\n    return {\r\n        type: 'SET_TASKS_TO_REDUX',\r\n        todolistID,\r\n        tasks\r\n    } as const\r\n}\r\n\r\nexport const getTasksTC = (todolistID: string) => (dispatch: DispatchType) => { //сделать\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistID)\r\n        .then(res => {\r\n            if(res.data.error == null) {\r\n                dispatch(setTasksAC(todolistID, res.data.items))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n              // handleServerAppError(res, dispatch)\r\n            }\r\n        }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(deleteTaskAC(todolistId, taskId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    const action = addTaskAC(task)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: DispatchType, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*/\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(changeTaskStatusAC(todolistId, taskId, status))\r\n                            dispatch(setAppStatusAC('succeeded'))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: DispatchType, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(onChangeTaskTitleAC(todolistId, taskId, title))\r\n                            dispatch(setAppStatusAC('succeeded'))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {Task} from \"../task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../../Reducers/todolist.reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"../../Reducers/tasks.reducer\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n\r\nexport type ToDoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<ResponseTaskType>\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (filter: FilterType, tlID: string) => void\r\n    addTask: (tlID: string, newTaskTitle: string) => void\r\n    changeTaskStatus: (tlID: string, tID: string, status: TaskStatuses) => void\r\n    removeTDFunc: (tlID: string) => void\r\n    onChangeTaskTitle: (tlID: string, tID: string, newTitle: string) => void\r\n    changeTDListTitleAPP: (newTitle: string, tlID: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoList = React.memo((props: ToDoListPropsType) => {\r\n\r\n    console.log('Todolist rendered')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const allFilter = useCallback(() => {\r\n        props.changeFilter('all', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const activeFilter = useCallback(() => {\r\n        props.changeFilter('active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const completedFilter = useCallback(() => {\r\n        props.changeFilter('completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n\r\n    const removeTDButton = () => {\r\n        props.removeTDFunc(props.todolist.id)\r\n    }\r\n\r\n    const ChangeTDListTitle = useCallback((newTitle: string) => {\r\n        props.changeTDListTitleAPP(props.todolist.id, newTitle)\r\n    }, [props.changeTDListTitleAPP, props.todolist.id])\r\n\r\n    const addTaskBridge = useCallback((title: string) => {\r\n        props.addTask(props.todolist.id, title)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n\r\n    let tasksForTDList = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={ChangeTDListTitle} todolist={props.todolist}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTDButton}\r\n                            disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addTaskBridge} disabled={props.todolist.entityStatus === 'loading'}/>\r\n\r\n            <div>\r\n                <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                    {\r\n                        tasksForTDList.map(t => <Task key={t.id}\r\n                                                      task={t}\r\n                                                      deleteTask={props.deleteTask}\r\n                                                      changeTaskStatus={props.changeTaskStatus}\r\n                                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                                      todolistId={props.todolist.id}\r\n                                                      todolist={props.todolist}\r\n                        />)\r\n                    }\r\n                </ul>\r\n                <Button color={props.todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={allFilter}\r\n                        size={\"small\"}>All</Button>\r\n                <Button color={props.todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={activeFilter}\r\n                        size={\"small\"}>Active</Button>\r\n                <Button color={props.todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={completedFilter}\r\n                        size={\"small\"}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAPPErrorACType, setAppStatusAC, setAppStatusACType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionSType | setAppStatusACType | setAPPErrorACType>\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionSType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST' : {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD_TODOLIST' : {\r\n            return [...state, {...action.todoList, filter: 'all', entityStatus: 'idle'}]\r\n        }\r\n        case 'CHANGE_TDL_TITLE' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE_TDL_FILTER' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE_TDL_ENTITY_STATUS' : {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        case 'SET_TODOLISTS' : {\r\n            return action.todolists.map(tl => {\r\n                    return {...tl, filter: \"all\", entityStatus: 'idle'}\r\n                }\r\n            )\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionSType =\r\n    RemoveTDlType\r\n    | addTDlType\r\n    | changeTDlTitleType\r\n    | changeTDlFilterType\r\n    | setTodolistsACType\r\n    | changeTDlEntityStatusACType\r\n\r\nexport type RemoveTDlType = ReturnType<typeof removeTDlAC>\r\n\r\nexport const removeTDlAC = (todolistID: string) => {\r\n    return {\r\n        type: 'REMOVE_TODOLIST',\r\n        id: todolistID\r\n    } as const\r\n}\r\n\r\nexport type addTDlType = ReturnType<typeof addTDlAC>\r\n\r\nexport const addTDlAC = (todoList: TodolistType) => {\r\n    return {\r\n        type: 'ADD_TODOLIST',\r\n        todoList\r\n    } as const\r\n}\r\n\r\ntype changeTDlTitleType = ReturnType<typeof changeTDlTitleAC>\r\n\r\nexport const changeTDlTitleAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE_TDL_TITLE',\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\n\r\ntype changeTDlFilterType = ReturnType<typeof changeTDlFilterAC>\r\n\r\nexport const changeTDlFilterAC = (filter: FilterType, tlID: string) => {\r\n    return {\r\n        type: 'CHANGE_TDL_FILTER',\r\n        filter,\r\n        id: tlID,\r\n    } as const\r\n}\r\n\r\ntype changeTDlEntityStatusACType = ReturnType<typeof changeTDlEntityStatusAC>\r\n\r\nexport const changeTDlEntityStatusAC = (status: RequestStatusType, tlID: string) => {\r\n    return {\r\n        type: 'CHANGE_TDL_ENTITY_STATUS',\r\n        status,\r\n        id: tlID,\r\n    } as const\r\n}\r\n\r\nexport type setTodolistsACType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {\r\n        type: 'SET_TODOLISTS',\r\n        todolists,\r\n    } as const\r\n}\r\n\r\nexport const getTodolistsTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTDLists()\r\n        .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTDlEntityStatusAC('loading', todolistId))\r\n    todolistsAPI.deleteTDLists(todolistId)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTDlAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTDLists(title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTDlAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTDLists(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTDlTitleAC(todolistId, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {MainReducerType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../Reducers/app-reducer\";\r\nimport {AlertProps, Snackbar} from \"@mui/material\";\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    //const [open, setOpen] = React.useState(true);\r\n\r\n    const error = useSelector<MainReducerType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        //setOpen(false);\r\n    };\r\n\r\n\r\n    const isOpen = error !== null\r\n\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react';\nimport '../../App.css';\nimport {TodoList} from \"../todoList/TodoList\";\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {MainReducerType} from \"../../store/store\";\nimport {\n    addTaskTC,\n    changeTaskStatusTC,\n    changeTaskTitleTC,\n    deleteTaskTC,\n    TasksStateType,\n} from \"../../Reducers/tasks.reducer\";\nimport {\n    addTodolistTC,\n    changeTDlFilterAC,\n    changeTodolistTitleTC,\n    FilterType,\n    getTodolistsTC,\n    removeTodolistsTC,\n    TodolistDomainType\n} from \"../../Reducers/todolist.reducer\";\nimport {TaskStatuses} from \"../../api/Todolists.api\";\nimport {ErrorSnackBar} from \"../errorSnackBar/ErrorSnackBar\";\nimport {RequestStatusType} from \"../../Reducers/app-reducer\";\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\n\nexport type TodoListsType = Array<TodolistDomainType>\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    let dispatch = useDispatch();\n    let todolistsFromState = useSelector<MainReducerType, TodoListsType>(state => state.todoLists)\n    let tasksFromState = useSelector<MainReducerType, TasksStateType>(state => state.tasks)\n\n    useEffect(() => {\n        if(demo){\n            return\n        }\n        dispatch(getTodolistsTC())\n    }, [])\n\n    const addTask = useCallback((tlID: string, newTaskTitle: string) => {\n        dispatch(addTaskTC(tlID, newTaskTitle))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((tlID: string, tID: string, status: TaskStatuses) => {\n        dispatch(changeTaskStatusTC(tlID, tID, status))\n    }, [dispatch])\n\n    const deleteTask = useCallback((todolistId: string, taskId: string) => {\n        dispatch(deleteTaskTC(todolistId, taskId))\n    }, [dispatch])\n\n    const onChangeTaskTitle = useCallback((tlID: string, tID: string, newTitle: string) => {\n        dispatch(changeTaskTitleTC(tlID, tID, newTitle))\n    }, [dispatch])\n\n    const changeFilter = useCallback((filter: FilterType, tlID: string) => {\n        dispatch(changeTDlFilterAC(filter, tlID))\n    }, [dispatch])\n\n    const removeTDFunc = useCallback((tlID: string) => {\n        dispatch(removeTodolistsTC(tlID))\n    }, [dispatch])\n\n    const addTDList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const changeTDListTitleAPP = useCallback((tlID: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(tlID, newTitle))\n    }, [dispatch])\n\n\n    const status = useSelector<MainReducerType, RequestStatusType>(state => state.app.status)\n\n    return (\n        <div style={{flexGrow: 1, background: '#E0E0E0', minHeight: '100vh', paddingBottom: '20px'}}>\n            <AppBar position=\"static\" color=\"default\">\n                <Toolbar>\n                    <ErrorSnackBar />\n                    <IconButton edge=\"start\" style={{marginRight: 2  }} color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" style={{flexGrow: 1}} align='center'>\n                        ToDoList\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n                { status === 'loading' && <LinearProgress color={'secondary'}/>}\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm callback={addTDList} label={'new todolist title'}/>\n                </Grid>\n                <Grid container spacing={4} >\n                    {todolistsFromState.map(tl => {\n                            let filteredTasks = tasksFromState[tl.id]\n                            return <Grid item>\n                                <Paper style={{padding: '10px'}}>\n                                    <TodoList\n                                        key={tl.id}\n                                        tasks={filteredTasks}\n                                        deleteTask={deleteTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeTaskStatus}\n                                        removeTDFunc={removeTDFunc}\n                                        onChangeTaskTitle={onChangeTaskTitle}\n                                        changeTDListTitleAPP={changeTDListTitleAPP}\n                                        demo={demo}\n                                        todolist={tl}\n                                    />\n                                </Paper>\n                            </Grid>\n                        }\n                    )}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../Reducers/todolist.reducer\";\r\nimport {tasksReducer} from \"../Reducers/tasks.reducer\";\r\nimport {appReducer} from \"../Reducers/app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type MainReducerType = ReturnType<typeof mainReducer>\r\n\r\nlet mainReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport let store = createStore(mainReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}